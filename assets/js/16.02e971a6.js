(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{360:function(t,e,a){"use strict";a.r(e);var s=a(39),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),a("OutboundLink")],1),t._v(" is a free and open-source version control system (VCS), and its one of\nthe best tools in developer's toolbox. It helps you to keep history of your\nchanges and gives you ability to travel back in time to an older version of your\ncodebase. It helps small and large teams to synchronize their code and it serves\nas a basis for larger communication platforms. Overall, it is an essential tool\nin developer's everyday life.")]),t._v(" "),a("h2",{attrs:{id:"installing-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-git"}},[t._v("#")]),t._v(" Installing Git")]),t._v(" "),a("p",[t._v("Visit "),a("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("git's download page"),a("OutboundLink")],1),t._v(" for full installation instructions. It is quite\nsimple and straightforward process. If you are on a linux system, chances are\nthat you already have git installed.")]),t._v(" "),a("p",[t._v("To check if you have git installed on your system, run this command in your\nterminal:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" --version "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git version x.y.z")]),t._v("\n")])])]),a("p",[t._v("It should print out the version of git.")]),t._v(" "),a("h2",{attrs:{id:"initializing-git-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initializing-git-repository"}},[t._v("#")]),t._v(" Initializing Git repository")]),t._v(" "),a("p",[t._v("To start working with git, you need to initialize it inside of your project:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-my-project"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),a("p",[t._v("This will create a "),a("code",[t._v(".git")]),t._v(" directory inside of your project. This is where git\nstores all of its files and data. If you would ever want to remove git from your\nproject, then you would just have to delete that directory. That would also\nremove all of the history that git has stored, so you would loose all of your\ncommits.")]),t._v(" "),a("h2",{attrs:{id:"committing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#committing"}},[t._v("#")]),t._v(" Committing")]),t._v(" "),a("p",[t._v("Once you have initialized git, it is time to make your very first commit! But\nbefore you do that, check status of your repository:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])]),a("p",[t._v("This should print out files and directories from your project as "),a("em",[t._v("unstaged")]),t._v(".\nThis means that git is not tracking any files yet. To start tracking changes in\nfiles you have to add them. This is done with "),a("code",[t._v("add")]),t._v(" command of git:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-a-file-or-directory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Path can be a file or a directory. In latter case, git would include all files\nfrom that directory. So you could do something like this to add all files of\nyour project:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("But often we have files that we don't want git to track. Such files often\ninclude OS specific files, and configuration files. To exclude them, we can\ncreate a "),a("code",[t._v(".gitignore")]),t._v(" file that would contain names, and patterns of files that\nwe want to ignore. Its content could look something like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".my-secrets\n.DS_Store\n")])])]),a("p",[t._v("Everything listed in this file will be ignored.")]),t._v(" "),a("p",[t._v("Sometimes you stage the file with "),a("code",[t._v("git add")]),t._v(", but then you remember that you\nactually didn't want that file to be tacked by git. To fix this, you can run\n"),a("code",[t._v("remove")]),t._v(" command with "),a("code",[t._v("--cached")]),t._v(" option:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remove --cached "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("This will instruct git to remove specified file or directory from its track\nlist.")]),t._v(" "),a("p",[t._v("You can learn more about "),a("code",[t._v(".gitignore")]),t._v(" and all of its options "),a("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("But once you have staged all of your files, you can commit them:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])]),a("p",[t._v("This will open up default editor specified in git's configuration (which usually\nis the legendary "),a("code",[t._v("vim")]),t._v(" editor ðŸ˜Ž).")]),t._v(" "),a("p",[t._v("In editor you will be tasked to specify commit message. First line of the\nmessage is the commit title, and it is separated by a newline from the rest of\nthe message, which is the body. There you can write changes that this commit\nbrings. For example, it could be:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Add localization for ru-RU\n\nSupport full localization for russian language. Refactor internationalization\nmodule for better extensibility.\n")])])]),a("p",[t._v("As you can see, message above has title:")]),t._v(" "),a("p",[a("em",[t._v('"Add localization for ru-RU"')])]),t._v(" "),a("p",[t._v("And body:")]),t._v(" "),a("p",[a("em",[t._v('"Support full localization for russian language. Refactor internationalization\nmodule for better extensibility."')])]),t._v(" "),a("blockquote",[a("p",[t._v("Refer to the "),a("a",{attrs:{href:"/git/commits"}},[t._v("Commits")]),t._v(" section of these docs to learn about our\nconventions regarding commit messages.")])]),t._v(" "),a("p",[t._v("Since this is your first commit, your commit message could be simply:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Initial\n")])])]),a("p",[t._v("From now on, every time to you make a significant change, you should commit your\nchanges. Try to commit often and avoid large commits, because it makes it harder\nto trace back to specific changes and complicates code review process.")]),t._v(" "),a("h2",{attrs:{id:"branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[t._v("#")]),t._v(" Branches")]),t._v(" "),a("p",[t._v("When a team of developers is working on a project, they often work on different\nthings in parallel.")]),t._v(" "),a("p",[t._v("Let's say we have team was of two people - "),a("strong",[t._v("Jade")]),t._v(" and "),a("strong",[t._v("Alex")]),t._v(". They are working on a\nwebsite. "),a("strong",[t._v("Jade")]),t._v(" is designing a navigation panel, while "),a("strong",[t._v("Alex")]),t._v(" is developing a\ncontact form. To separate their work, they create separate branches for their\ntasks:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch feature/navigation "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Jade")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch feature/contact-form "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Alex")]),t._v("\n")])])]),a("p",[t._v("But before they start coding, they have to "),a("em",[t._v("checkout")]),t._v(" to their new branch:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/navigation "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Jade")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/contact-form "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Alex")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("There is also a shorthand to "),a("em",[t._v("create and checkout")]),t._v(" to a new branch:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])]),t._v(" "),a("p",[t._v("Now their work is separated. All commits they make will be in that branch only.\nWhen one of them completes their task, they can merge changes to the main\nbranch, and work of the other wouldn't be interrupted.")]),t._v(" "),a("blockquote",[a("p",[t._v("But if "),a("strong",[t._v("Jade")]),t._v(" were to complete their task first and merge it to the main\nbranch, and "),a("strong",[t._v("Alex's")]),t._v(" work somehow depended on changes that "),a("strong",[t._v("Jade")]),t._v(" made,\nthen "),a("strong",[t._v("Alex")]),t._v(" would have to rebase their branch.")])]),t._v(" "),a("p",[t._v("In practice, we never merge directly into the main branch. We create so called\npull-requests, where other team members review our changes and if everything is\nok, they "),a("em",[t._v("approve")]),t._v(" and "),a("em",[t._v("merge")]),t._v(" them.")]),t._v(" "),a("p",[t._v("Read more about "),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/using-branches",target:"_blank",rel:"noopener noreferrer"}},[t._v("branching in git"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"pushing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pushing"}},[t._v("#")]),t._v(" Pushing")]),t._v(" "),a("p",[t._v("When you make a commit, git stores all of your changes locally. To be able to\nwork with your teammates and share your changes, you need to push your commits\nto a remote repository.")]),t._v(" "),a("p",[t._v("Remote repository is a server that has git installed on it, and it enables you\nto "),a("em",[t._v("push")]),t._v(" your local changes to that server, where all of your teammates can\n"),a("em",[t._v("pull")]),t._v(" them.")]),t._v(" "),a("p",[t._v("Platforms such "),a("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab"),a("OutboundLink")],1),t._v(", and "),a("a",{attrs:{href:"https://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BitBucket"),a("OutboundLink")],1),t._v(" are popular choices\nfor hosting git repositories.")]),t._v(" "),a("p",[t._v("To push your changes to a remote repository, you first have to add it:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote-link"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Here, "),a("code",[t._v("<remote-name>")]),t._v(" is going to be an alias to the "),a("code",[t._v("<remote-link>")]),t._v(". Usually,\nthere is only one remote repository and its commonly called "),a("code",[t._v("origin")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote-link"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Once you have added link to your remote repository, you can push your changes:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[a("code",[t._v("--set-upstream")]),t._v(" option is required only on the first push of your branch. It\ntells git that "),a("em",[t._v("this local branch")]),t._v(" is bound to "),a("em",[t._v("that remote branch")]),t._v(". So in\nfuture pulls and pushes you won't have to specify remote name and branch name.\nYou would simply run:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or git pull")]),t._v("\n")])])]),a("p",[t._v("Read more about remotes "),a("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"more-git-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-git-commands"}},[t._v("#")]),t._v(" More Git commands")]),t._v(" "),a("p",[t._v("Git has plethora of commands, and these docs can't possible cover them all. So\nhere is a link to a simple "),a("a",{attrs:{href:"https://education.github.com/git-cheat-sheet-education.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("git cheat sheet by github"),a("OutboundLink")],1),t._v(" that contains all of\nthe essential commands that you may require during your development.")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git, git-scm.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git downloads, git-scm.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://education.github.com/git-cheat-sheet-education.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git cheat sheet, education.github.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("gitignore")]),t._v(", git-scm.com/docs/gitignore"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Working with remotes, git-scm.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub, github.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab, gitlab.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://bitbucket.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BitBucket, bitbucket.org"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/using-branches",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Git Branches, atlassian.com"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);